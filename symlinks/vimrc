set nocompatible

filetype plugin indent on
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vim Plugins {{{
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-commentary'
Plugin 'rking/ag.vim'
Plugin 'tpope/vim-surround'
Plugin 'powerline/powerline'
Plugin 'mtth/scratch.vim'
Plugin 'Rename'
Plugin 'kien/ctrlp.vim'
Plugin 'benmills/vimux'
Plugin 'ervandew/screen'
Plugin 'tpope/vim-fugitive'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-projectionist'
Plugin 'ngmy/vim-rubocop'
Plugin 'rizzatti/dash.vim'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimfiler.vim'
Plugin 'mbbill/undotree'
Plugin 'w0rp/ale'
Plugin 'nanotech/jellybeans.vim'

" clojure specific
Plugin 'tpope/vim-classpath'
Plugin 'tpope/vim-fireplace'
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-clojure-highlight'

" javascript specific
Plugin 'pangloss/vim-javascript'
Plugin 'moll/vim-node'

" ruby specific
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-rails'
Plugin 'ecomba/vim-ruby-refactoring'
Plugin 'tmhedberg/matchit'
Plugin 'thoughtbot/vim-rspec'

" elixir Plugins
Plugin 'elixir-lang/vim-elixir'
Plugin 'slashmili/alchemist.vim'
" " }}}

call vundle#end()

" Fold
set foldmethod=marker
set foldlevel=0

" delete the toolbar
if has("gui_running")
    set guioptions=egmrt
endif

"
let g:rails_statusline = 0

" tab setup
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set colorcolumn=81
set scrolloff=3 " minimum lines to keep above and below cursor

" Highlight matching paranthesis
set showmatch

" indent on new line
set autoindent
set smartindent

" setup the leader key
let mapleader = ","

" spell checking on git commits
autocmd FileType gitcommit setlocal spell spelllang=en_us

" line wrap at 72 characters on git commits
autocmd FileType gitcommit set tw=72

" makes ,w split windows vertically
nnoremap <leader>w <C-w>v<C-w>l

" split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Allow Ctrl+r to find/replace strings:
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" Configure ctrl+p
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_use_caching = 0

" font
" set guifont=Inconsolata:h12
set guifont=Inconsolata-dz\ for\ Powerline:h12

" show powerline
set laststatus=2

set wrap
set textwidth=80
set guioptions=aAce
set winwidth=80

" color scheme
syntax enable
colorscheme jellybeans

" Turn on line numbers
set number

" Show current position
set ruler

" Set height of the command bar
set cmdheight=2

" Ignore case when searching
set ignorecase

" Highlight search results
set hlsearch

" Turn off backup
set nobackup
set nowb
set noswapfile

" Auto hide scratch
let g:scratch_autohide = 1

" clear last search highlighting
nnoremap <leader>q :noh<CR>

" Move a line of text using Comamnd+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" add to the list of files to ignore
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" Run midje tests in vim
nnoremap <leader>rt :Eval (do (require 'midje.repl) (time (midje.repl/load-facts)))<CR>

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing spaces on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWritePre * :call DeleteTrailingWS()

" Enable clojure script syntax highlighting
autocmd BufRead,BufNewFile *.cljs setlocal filetype=clojure

" Set the default dispatch command
autocmd FileType ruby let b:dispatch = 'bundle exec rake %'

let g:clojure_fuzzy_indent = 1
let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let', '^fact', '^facts']

noremap  <Up> ""
noremap! <Up> <Esc>
noremap  <Down> ""
noremap! <Down> <Esc>
noremap  <Left> ""
noremap! <Left> <Esc>
noremap  <Right> ""
noremap! <Right> <Esc>

" Disable the bells

set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

" Screen settings
let g:ScreenImpl = 'Tmux'
let g:ScreenShellTmuxInitArgs = '-2'
let g:ScreenShellInitialFocus = 'shell'
let g:ScreenShellQuitOnVimExit = 0
map <F5> :ScreenShellVertical<CR>
command -nargs=? -complete=shellcmd W  :w | :call g:ScreenShellSend("load'".@%."';")
map <Leader>r :w<CR> :call g:ScreenShellSend("rspec ".@% . ':' . line('.'))<CR>
map <Leader>e :w<CR> :call g:ScreenShellSend("cucumber --require features/step_definitions --format=pretty ".@% .':' . line('.'))<CR>
map <Leader>b :w<CR> :call g:ScreenShellSend("break ".@% . ':' . line('.'))<CR>

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "!bundle exec rspec {spec}"

" Running minitest for the current file
function! RunMinitest()
  execute "!bundle exec ruby -Ilib:test " .@%
endfunction

map <leader>mt :call RunMinitest()<CR>

filetype off
let &runtimepath.=',~/.vim/bundle/ale'
filetype plugin indent on

let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

let g:ale_linters = {
\   'javascript': ['eslint'],
\}
